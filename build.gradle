buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
    dependencies {
        classpath 'net.sf.proguard:proguard-gradle:6.2.2'
    }
}

plugins {
  id "org.jetbrains.kotlin.jvm"
  id "com.github.johnrengelman.shadow" version "5.2.0"
  id 'antlr'
}

repositories {
  mavenCentral()
  maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
  maven { url 'https://kotlin.bintray.com/kotlinx' }
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// repositories {
//     maven { url 'https://masa.dy.fi/maven' }
// }

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: project.mappings_channel, version: project.mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:' + project.minecraft_version + '-' + project.forge_version

    // compile fg.deobf (project.dependencies.create('fi.dy.masa.malilib:malilib-forge-' + project.minecraft_version_out + ':' + project.malilib_version) {
    //     transitive = false
    // })

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"
    // Kotlin fabric

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    implementation "org.jetbrains.kotlin:kotlin-script-runtime"
    antlr "org.antlr:antlr4:4.8"
    implementation "org.antlr:antlr4-runtime:4.8"


    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    baseName = project.mod_file_name + '-' + project.minecraft_version

    manifest {
        attributes([
            "Specification-Title": "${project.archives_base_name}",
            "Specification-Vendor": "${project.author}",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "${project.mod_name}",
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Vendor": "${project.author}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
//jar {
//  from "LICENSE"
//}

//remapJar { // fabric thing
//  archiveName = "${archivesBaseName}-${version}-remapped-dev.jar"
//}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
//  publications {
//    mavenJava(MavenPublication) {
//      // add all the jars that should be included when publishing to maven
//      artifact(remapJar) {
//        builtBy remapJar
//      }
////      artifact(sourcesJar) {
////        builtBy remapSourcesJar
////      }
//    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

compileKotlin.kotlinOptions.jvmTarget = "1.8"
compileKotlin {
  kotlinOptions {
    freeCompilerArgs = ['-Xopt-in=kotlin.ExperimentalStdlibApi']
    // includeRuntime = true
    // noStdlib = false
  }
}
//sourceSets {
//    main.java.srcDirs += 'src'
//    main.kotlin.srcDirs += 'src'
//}
jar {
    archiveFileName = "inventoryprofiles-forge-${project.minecraft_version}-${project.version}-non-shadow.jar"
}
shadowJar {
  archiveFileName = "inventoryprofiles-forge-${project.minecraft_version}-${project.version}-all.jar"
  dependencies {
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-common"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk7"))
    include(dependency("org.jetbrains.kotlin:kotlin-stdlib-jdk8"))
    include(dependency("org.antlr:antlr4-runtime"))
  }
  relocate 'kotlin', 'io.github.jsnimda.common.embedded.kotlin'
  relocate 'org.antlr', 'io.github.jsnimda.common.embedded.org.antlr'
  exclude '**/*.kotlin_metadata'
  exclude '**/*.kotlin_module'
  exclude '**/*.kotlin_builtins'
  exclude '**/*_ws.class' // fixme find a better solution for removing *.ws.kts
  exclude '**/*_ws$*.class'
  exclude 'mappings/mappings.tiny' // before kt, build .jar don't have this folder (this 500K thing)
}

//task remapShadowJar(type: net.fabricmc.loom.task.RemapJarTask) {
//  input = shadowJar.archivePath
//  addNestedDependencies = remapJar.addNestedDependencies
//  archiveClassifier = "remapped-all"
//}
//task remapShadowJar() {
//
//
//}
task customJar(type: org.gradle.api.tasks.bundling.Jar) { // do nothing (actually it make a 1 KB jar), for reobf  only
  archiveFileName = "inventoryprofiles-forge-${project.minecraft_version}-${project.version}.jar"
  doLast {
    copy {
      from "build/libs/inventoryprofiles-forge-${project.minecraft_version}-${project.version}-all-proguard.jar"
      into "build/libs"
      rename { String fileName ->
        fileName.replace(
            "inventoryprofiles-forge-${project.minecraft_version}-${project.version}-all-proguard.jar",
            "inventoryprofiles-forge-${project.minecraft_version}-${project.version}.jar"
        )
      }
    }
  }
}
reobf {
    customJar {}
}
//tasks.remapShadowJar.dependsOn tasks.shadowJar

/*
output jars: (embedding library: kotlin, antlr)
*-dev.jar              | no embedded kotlin, no mapping
*-remapped-dev.jar     | no embedded kotlin, mapped
*-all.jar              | embedded kotlin, no mapping
*-all-proguard.jar     | embedded kotlin, removed unused embedding classes, no mapping
*.jar                  | embedded kotlin, removed unused embedding classes, mapped

*/

//tasks.remapShadowJar.dependsOn tasks.shadowJar

// this line solve 'Could not resolve all files' error for configurations.findByName('runtimeClasspath').getFiles()
// but not needed if by doFirst
//allprojects {
//  repositories {
//    jcenter()
//    mavenCentral()
//  }
//}

task proguard(type: proguard.gradle.ProGuardTask) {
  configuration 'proguard.txt'

  injars "build/libs/inventoryprofiles-forge-${project.minecraft_version}-${project.version}-all.jar"
  outjars "build/libs/inventoryprofiles-forge-${project.minecraft_version}-${project.version}-all-proguard.jar"

  doFirst {
      libraryjars configurations.findByName('runtimeClasspath').getFiles()
  }
}


//tasks.shadowJar.mustRunAfter tasks.compileKotlin

tasks.proguard.dependsOn tasks.shadowJar
tasks.customJar.dependsOn tasks.proguard
tasks.build.dependsOn tasks.customJar
//tasks.proguard.dependsOn tasks.shadowJar
//tasks.remapShadowJar.dependsOn tasks.proguard
//tasks.build.dependsOn tasks.remapShadowJar

//tasks.proguard.dependsOn tasks.remapShadowJar
//tasks.build.dependsOn tasks.proguard

// https://forums.minecraftforge.net/topic/62995-shadowing-dependencies/
//https://github.com/Choonster-Minecraft-Mods/TestMod3/blob/97c54505d9b62ea8b3a19c37d9ceb55f209eb2b1/build.gradle#L55-L69

//https://stackoverflow.com/questions/10615966/compiling-3-2-antlr-grammar-with-gradle
task genAntlr(type: JavaExec) {
  description = 'Generates Java sources from Antlr4 grammars.'

  def destinationDir = "src/main/java/io/github/jsnimda/inventoryprofiles/gen"
  def antlrSource = 'src/main/java/io/github/jsnimda/inventoryprofiles/parser/antlr'
  def packageName = "io.github.jsnimda.inventoryprofiles.gen"

  inputs.dir file(antlrSource)
  outputs.dir file(destinationDir)

  def grammars = fileTree(antlrSource).include('**/*.g4')
  def files = grammars.files.collect { file('.').relativePath(it) } // no absolute path in generated files

  main = 'org.antlr.v4.Tool'
  classpath = configurations.antlr
  args = ["-o", destinationDir, "-package", packageName, files].flatten()
}

generateGrammarSource { }
generateGrammarSource.enabled = false

//https://stackoverflow.com/questions/49638136/kotlin-gradle-plugin-how-to-use-custom-output-directory
//println(compileKotlin.destinationDir)
//tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
//  destinationDir = new File(buildDir, "classes/java/main")
//}
// tmp solution fixing duplicate classes or forge not loading the .class files
//https://discuss.gradle.org/t/duplicated-classes-output-jar-with-gradle/17301
//     ensure you're excluding duplicates
jar {
  duplicatesStrategy = 'exclude'
}

